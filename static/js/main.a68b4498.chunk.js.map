{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WeatherContext","createContext","cities","addCity","name","temperature","CityList","props","context","useContext","className","map","city","i","TemperatureAverage","length","total","avg","toFixed","AddCityButton","useState","setName","value","onChange","e","target","onClick","Math","ceil","random","App","setCities","Provider","prevCities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAGMA,G,MAAiBC,wBAAc,CACnCC,OAAQ,GACRC,QAAS,SAACC,EAAMC,QAGZC,EAAW,SAACC,GAChB,IAAMC,EAAUC,qBAAWT,GAC3B,OACE,wBAAOU,UAAU,YAAjB,UACE,gCACE,+BACE,sCACA,kDAGJ,gCACGF,EAAQN,OAAOS,KAAI,SAACC,EAAMC,GAAP,OAClB,+BACE,6BAAKD,EAAKR,OACV,6BAAKQ,EAAKP,gBAFHO,EAAKR,eAUlBU,EAAqB,SAACP,GAC1B,IAAMC,EAAUC,qBAAWT,GAC3B,GAA8B,IAA1BQ,EAAQN,OAAOa,OACjB,OACE,sFAGJ,IAPoC,EAOhCC,EAAQ,EAPwB,cAQjBR,EAAQN,QARS,IAQpC,2BAAmC,CACjCc,GADiC,QACnBX,aAToB,8BAWpC,IAAMY,EAAMD,EAAQR,EAAQN,OAAOa,OACnC,OACE,kDACiB,4BAAIE,EAAIC,QAAQ,KADjC,2BAMEC,EAAgB,SAACZ,GACrB,IAAMC,EAAUC,qBAAWT,GADI,EAEPoB,mBAAS,IAFF,mBAExBhB,EAFwB,KAElBiB,EAFkB,KAO/B,OACE,sBAAKX,UAAU,gBAAf,UACE,uBAAOA,UAAU,QAAQY,MAAOlB,EAAMmB,SAAU,SAACC,GAAD,OAAOH,EAAQG,EAAEC,OAAOH,UACxE,wBAAQZ,UAAU,QAAQgB,QAPf,WACblB,EAAQL,QAAQC,EAAMuB,KAAKC,KAAqB,GAAhBD,KAAKE,WACrCR,EAAQ,KAKN,qBA6BSS,MAvBf,WAAgB,IAAD,EACeV,mBAAS,IADxB,mBACNlB,EADM,KACE6B,EADF,KAQb,OACG,cAAC/B,EAAegC,SAAhB,CAAyBV,MAAO,CAC/BpB,SACAC,QARY,SAACC,EAAMC,GAErB0B,GAAU,SAAAE,GAAU,4BAAQA,GAAR,CAAoB,CAAE7B,OAAMC,sBAI/C,SAIC,sBAAKK,UAAU,gBAAf,UACE,mDACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCtEOwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a68b4498.chunk.js","sourcesContent":["import React,{createContext,useState,useContext} from 'react';\nimport './App.css';\n\nconst WeatherContext = createContext({\n  cities: [],\n  addCity: (name, temperature) => { },\n});\n\nconst CityList = (props) => {\n  const context = useContext(WeatherContext);\n  return (\n    <table className=\"city-list\">\n      <thead>\n        <tr>\n          <th>City</th>\n          <th>Temperature</th>\n        </tr>\n      </thead>\n      <tbody>\n        {context.cities.map((city, i) => (\n          <tr key={city.name}>\n            <td>{city.name}</td>\n            <td>{city.temperature}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst TemperatureAverage = (props) => {\n  const context = useContext(WeatherContext);\n  if (context.cities.length === 0) {\n    return (\n      <div>Add some cities to view their average temperatures.</div>\n    );\n  }\n  let total = 0;\n  for (const city of context.cities) {\n    total += city.temperature;\n  }\n  const avg = total / context.cities.length;\n  return (\n    <div>\n      The average is <b>{avg.toFixed(2)}</b> degrees Fahrenheit.\n    </div>\n  );\n};\n\nconst AddCityButton = (props) => {\n  const context = useContext(WeatherContext);\n  const [name, setName] = useState('');\n  const submit = () => {\n    context.addCity(name, Math.ceil(Math.random() * 10));\n    setName('');\n  };\n  return (\n    <div className=\"add-city-form\">\n      <input className=\"input\" value={name} onChange={(e) => setName(e.target.value)} />\n      <button className=\"input\" onClick={submit}>Add</button>\n    </div>\n  );\n};\n\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n\n  const addCity = (name, temperature) => {\n    const newCity = { name, temperature };\n    setCities(prevCities => [...prevCities, { name, temperature }]);\n  };\n\n  return (\n     <WeatherContext.Provider value={{\n      cities,\n      addCity,\n    }}>\n      <div className=\"city-overview\">\n        <h2>Multi-Weather App</h2>\n        <CityList />\n        <AddCityButton />\n        <TemperatureAverage />\n      </div>\n    </WeatherContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}